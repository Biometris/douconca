% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/anova.wrda.r
\name{anova.wrda}
\alias{anova.wrda}
\title{Permutation Test for weighted redundancy analysis}
\usage{
\method{anova}{wrda}(object, permutations = 999, by = NULL)
}
\arguments{
\item{object}{an object from \code{\link{dc_CA}}.}

\item{permutations}{a list of control values for the permutations as
returned by the function \code{\link[permute]{how}}, or
the number of permutations required (default 999), or
a permutation matrix where each row gives the permuted indices.}

\item{by}{character \code{"axis"} which sets the test statistic to the
first eigenvalue of the dc-CA model.
Default: \code{NULL} which set the test statistic to the inertia named \code{constraintsTE}
in the inertia element of \code{\link{dc_CA}}). This is
the environmentally constrained inertia explained by the traits (without trait covariates).
(which is equal to the trait-constrained inertia
explained by the environmental predictors (without covariates).)
The default is quicker computationally as it avoid computation of an svd of permuted data sets.}
}
\value{
A list with two elements with names \code{table} and \code{eig}.
 The \code{table} is as from \code{\link[vegan]{anova.cca}} and \code{eig} gives the dc-CA eigenvalues,
}
\description{
\code{anova.wrda} performs a Community-level permutation test of dc-CA.
The test uses residual predictor permutation (ter Braak 2022), which is robust
against differences in sites total abundance in the \code{response} in \code{\link{dc_CA}} (ter Braak & te Beest, 2022)
The arguments of the function are similar to those of \code{\link[vegan]{anova.cca}}, but more restricted.
With equal site-totals as in \code{\link{dc_CA}}, \code{anova(object$RDAonEnv)} is much faster.
}
\details{
The algorithm is two-step. The first step is a \code{\link[vegan]{cca}}
of the transposed \code{response} on to the traits using
\code{formulaTraits}. The second is a weighted redundancy analysis of the community weighted means (CWM) of
orthonormalized traits againt the environemtal variables using \code{formulaEnv} and
published R-code for weighted redundancy analysis, which includes statistical significance
tests using residual predictor permutation (ter Braak, 2022).
}
\examples{
data("dune_trait_env")
# rownames are carried forward in results
rownames(dune_trait_env$comm) <- dune_trait_env$comm$Sites
response = dune_trait_env$comm[, -1]  # must delete "Sites"
w <- rep(1,20); w[1:10]<- 8; w[17:20] <- 0.5

object <- wrda(formula= ~A1+Moist+Mag+Use+Condition(Manure),
          response = response, data= dune_trait_env$envir, weights = w)
print(object) # Proportions equal to those Canoco 5.15
mod_scores <- douconca::scores(object, display = "all")
douconca::scores(object, which_cor = c("A1", "Manure"), display = c("cor"))
anova(object)

# The default is equal weights, which allows checking against vegan
#object <- wrda(formula= ~A1+Moist+Mag+Use+Manure,
object1 <- wrda(formula= ~A1+Moist+Mag+Use+Condition(Manure),
               response = response, data= dune_trait_env$envir)
print(object1)

# compare with vegan::rda
#object2 <- vegan::rda(formula= response~A1+Moist+Mag+Use+Manure, data= dune_trait_env$envir)
object2 <- vegan::rda(formula= response~A1+Moist+Mag+Use+Condition(Manure), data= dune_trait_env$envir)
print(object2)
object1$CCA$eig/ object2$CCA$eig #
object1$tot.chi/object2$tot.chi
object1$CCA$tot.chi/object2$CCA$tot.chi
range(object1$CCA$u/ object2$CCA$u)

myconst <- sqrt(object1$Nobs*object2$tot.chi)
range(object1$site_axes$site_scores$lc_env_scores/ vegan::scores(object2, choices = seq_len(ncol(object$site_axes$site_scores$lc_env_scores)),
                                                                display= "lc", scaling= "sites",const = myconst)) # 1 1

}
\references{
ter Braak, C.J.F. (2022) Predictor versus response permutation
for significance testing in weighted regression and redundancy analysis.
Journal of statistical computation and simulation, 92, 2041-2059.
 https://doi.org/10.1080/00949655.2021.2019256
}
